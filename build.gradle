import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm' version '1.9.20' // Add Kotlin plugin
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless'  version '6.25.0'
	id 'org.openapi.generator' version '5.3.0'
}

group = 'com.workshop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	sourceCompatibility = JavaVersion.VERSION_21
}

repositories {
	mavenCentral()
}

sourceSets {
	main {
		java {
			srcDirs 'src/main/java'
		}
		def openApiGeneratedOutputDir = project.hasProperty('openApiGeneratedOutputDir') ? project.openApiGeneratedOutputDir : null
		if (openApiGeneratedOutputDir) {
			kotlin {
				srcDirs "${rootDir}/${openApiGeneratedOutputDir}/src/main/kotlin"
				srcDirs "${rootDir}/${openApiGeneratedOutputDir}/src/main/java"
			}
		}
		kotlin {
			srcDirs "${rootDir}/generated/src/main/kotlin"
			srcDirs "${rootDir}/generated/src/main/java"
		}

	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
	implementation 'io.swagger.parser.v3:swagger-parser:2.1.22'
	implementation 'com.google.googlejavaformat:google-java-format:1.24.0'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

spotless {
	java {
		googleJavaFormat('1.17.0')  // Replace with your desired version
	}
}

def specLocation = "$rootDir/api-spec/schema/swagger-ref.json"

tasks.register('generateServerCode', GenerateTask) {
	group = 'OpenAPI Tools'
	description = 'Generate kotlin spring server code via OpenAPI tools generator.'

	def outputDirVal = 'generated'
	generatorName = 'kotlin-spring'
	inputSpec = specLocation
	outputDir = "$rootDir/$outputDirVal"
	configFile = "$rootDir/open-api-tools.json"

	packageName = 'com.workshop.back'
	apiPackage = 'com.workshop.back.controller'
	modelPackage = 'com.workshop.back.model'
	generateApiTests = false
	generateModelTests = false
	modelNameSuffix = 'dto'

	globalProperties = ['apis': '', 'models': '']
}

//tasks.register('generateServerCode', GenerateTask) {
//	group = 'OpenAPI Tools'
//	description = 'Generate Java Spring interfaces for the service layer via OpenAPI tools generator.'
//
//	def outputDirVal = 'generated-server'
//	generatorName = 'spring' // Usar o gerador para Spring Java
//	inputSpec = specLocation // Local da especificação OpenAPI
//	outputDir = "$rootDir/$outputDirVal"
//	configFile = "$rootDir/open-api-tools.json"
//
//	packageName = 'com.workshop.back' // Pacote base do código gerado
//	apiPackage = 'com.workshop.back.controller' // Pacote para as interfaces de controle
//	modelPackage = 'com.workshop.back.model' // Pacote para os modelos
//	generateApiTests = false // Não gerar testes de API automaticamente
//	generateModelTests = false // Não gerar testes de modelo automaticamente
//	modelNameSuffix = 'dto' // Sufixo opcional para os modelos
//
//	// Propriedades globais para gerar somente interfaces
//	globalProperties = [
//			'apis': '', // Gerar APIs
//			'models': '', // Gerar modelos
//			'apiInterfaces': 'true' // Gera apenas as interfaces das APIs
//	]
//
//	// (Opcional) Ativar a limpeza da saída antes de gerar o código
//	// cleanupOutput = true
//}

tasks.register('getDependencies', Copy) {
	from sourceSets.main.runtimeClasspath
	into 'runtime/'

	doFirst {
		def runtimeDir = file('runtime')
		runtimeDir.deleteDir()
		runtimeDir.mkdir()
	}

	doLast {
		file('runtime').deleteDir()
	}
}